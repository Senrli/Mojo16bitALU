module hex_alutester (
    input clk,  // clock
    input rst,  // reset
    input rst2, // reset for timer
    input auto,
    input manual,
    input state[2],               // result for each of the auto test case
    output led_disp_state[2],     //output states for the led_display module
    output check[5],              //tester output to the device
    output fails[4],              //output number of fails from auto test
    output passes[4],             //output number of passes from auto test
    output out
  ) {
  
  .clk(clk) 
  {
    
    .rst(rst) 
    {
      fsm state_main = {IDLE, AUTO, FAIL_DEMO};        //reset the device into IDLE state when reset button is pressed
    }
    .rst(rst2)                                      //reset the fsm when entering the zero state
    {
      dff delay_counter[26];         //2^26 = 67,108,864, need to be capped at 50,000,000 for one second
      dff pass_counter[4];           //counter to record down no of passed cases 
      dff fail_counter[4];           //counter to record down no of failed cases
      fsm state_auto = {ADD_1,ADD_2,ADD_3, ADD_4, 
                        BOOLE_1, BOOLE_2, BOOLE_3, BOOLE_4, BOOLE_5, BOOLE_6, BOOLE_7, 
                        CMP_1, CMP_2, CMP_3, 
                        SHIFT_1, SHIFT_2, SHIFT_3, SHIFT_4, 
                        PASS,FAIL};
      fsm fail_demo = {FAIL_DEMO1, FAIL_DEMO2};
    }
  }
  
  always {
    fails = fail_counter.q;                    //assign outputs
    passes = pass_counter.q;                   //assign outputs
    
    case (state_main.q){
      state_main.IDLE:
        check = 
      }
  }
}
