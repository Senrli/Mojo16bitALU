module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner auto_button;
    button_conditioner manual_button;
    button_conditioner auto_fail_button;
    
    pipeline dip_cond[16] (#DEPTH(2));  //create a pipeline for the DIP input 
    
    edge_detector auto_edge(#RISE(1), #FALL(0));
    edge_detector manual_edge(#RISE(1), #FALL(0));
    edge_detector auto_fail_edge(#RISE(1), #FALL(0));
    
    .rst(rst){
      hex_alutester hex_alutester;
      disp_ctrl disp_ctrl;
      multi_seven_seg multi_seven_seg;
      }
  }
  
  
 
  
  
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_seg = ~multi_seven_seg.seg; // connect segments to the driver       //segment of the 7-seg display
    io_sel = ~multi_seven_seg.sel; // connect digit select to the driver   //digit of 7-seg display    
       
    dip_cond.in = c{io_dip[1][7:0],io_dip[0][7:0]};
    
    io_led = disp_ctrl.disc_led_out;
    
    manual_button.in = io_button[4];
    auto_button.in = io_button[0];
    auto_fail_button.in = io_button[2];
    
    manual_edge.in = manual_button.out;
    auto_edge.in = auto_button.out;
    auto_fail_edge.in = auto_fail_button.out;
    
    hex_alutester.auto_fail = auto_fail_edge.out;
    hex_alutester.auto = auto_edge.out;
    hex_alutester.manual = manual_edge.out;
    //hex_alutester.rst2 = auto_fail_edge.out | auto_edge.out | manual_edge.out;
    hex_alutester.dip_sw_in = dip_cond.out;
    
    disp_ctrl.data_bus = hex_alutester.data_bus_out;
    disp_ctrl.state = hex_alutester.state_out;
    
    multi_seven_seg.values = disp_ctrl.seven_seg_out;
    
    
  }
}